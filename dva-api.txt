API

dva
	默认输出文件

dva/router 
	默认输出 react-router 接口  react-router-redux 的接口通过属性 routerRedux 输出。
	示例
		import { Router, Route, routerRedux } from 'dva/router';
		
dva/fetch
	异步请求库 输出 isomorphic-fetch 的接口。不和 dva 强绑定，可以选择任意的请求库
	
dva/saga
	输出 redux-saga 的接口，主要用于用例的编写。（用例中需要用到 effects）
	
dva/dynamic
	解决组件动态加载问题的 util 方法。
	示例
	import dynamic from 'dva/dynamic';

	const UserPageComponent = dynamic({
	  app,
	  models: () => [
		import('./models/users'),
	  ],
	  component: () => import('./routes/UserPage'),
	});
	
	参数解释:
		app: dva实例 加载models需要
		models: 返回Promise数组的函数 Promise 返回 dva model
		component: 返回 Promise 的函数，Promise 返回 React Component

		
dva API

app = dva(opts) 
	创建dva实例 (dva 支持多实例)
	opts
		histroy: 指定路由用的history 默认为hashHistroy(url带#) 可以改为 browserHistroy (不带#)
		initalState: 指定初始数据， 优先级高于model中的State 默认为{}
		
	如果配置为browserHistroy 可为这样
	import createHistory from 'history/createBrowserHistory';
	const app = dva({
	  history: createHistory(),
	});
	
	当然opts 可配置所有hooks  下面含全部可配置属性
	const app = dva({
	  history,
	  initialState,
	  onError,
	  onAction,
	  onStateChange,
	  onReducer,
	  onEffect,
	  onHmr,
	  extraReducers,
	  extraEnhancers,
	});
	
app.use(hooks)
	配置hooks或者注册插件
	示例
	import createLoading from 'dva-loading';
	app.use(createLoading(opts));
	
	hooks包含
		onError((err, dispatch) => {}) effect执行错误或subscribe通过done主动抛出错误时触发 可用于管理全局出错状态
			注意: subscription 并没有加try-catch 所以有错误需要done主动抛出
			示例
			app.model({
			  subscriptions: {
				setup({ dispatch }, done) {
				  done(e);
				},
			  },
			});
			可以换成如下
			import { message } from 'antd';
			const app = dva({
			  onError(e) {
				message.error(e.message, /* duration */3);
			  },
			});
			
		onAction(fn | fn[])
		在action 被dispatch时触发， 用于注册redux中间件，支持函数数组
		例如通过 redux-logger 打印日志
		import createLogger from 'redux-logger';
		const app = dva({
		  onAction: createLogger(opts),
		});
		
		onStateChange(fn)
		State 改变时触发，可以同步State到localStorage 服务端等
		
		onReducer(fn)
		封装reducer执行， 比如借助 redux-undo 实现 redo/undo
		示例
		import undoable from 'redux-undo';
		const app = dva({
		  onReducer: reducer => {
			return (state, action) => {
			  const undoOpts = {};
			  const newState = undoable(reducer, undoOpts)(state, action);
			  // 由于 dva 同步了 routing 数据，所以需要把这部分还原
			  return { ...newState, routing: newState.present.routing };
			},
		  },
		});
		
		onEffect(fn)
		封装effect执行，比如 dva-loading 基于此实现了自动处理 loading 状态。
		
		onHmr(fn)
		热替换相关，目前用于 babel-plugin-dva-hmr
		
		extraReducers
		指定额外的reducer 比如 redux-form 需要指定额外的 form reducer：
		import { reducer as formReducer } from 'redux-form'
		const app = dva({
		  extraReducers: {
			form: formReducer,
		  },
		});
		
		extraEnhancers
		指定额外的 StoreEnhancer ，比如结合 redux-persist 的使用：
		import { persistStore, autoRehydrate } from 'redux-persist';
		const app = dva({
		  extraEnhancers: [autoRehydrate()],
		});
		persistStore(app._store);
		
app.model(model)
	注册model
	
app.unmodel(namespace)
	取消model注册 清理reducer effects subscriptions 如果没有返回unlisten函数  使用app.unmodel 会给予警告

app.router(({ history, app }) => RouterConfig)
	注册路由表
	import { Router, Route } from 'dva/router';
	app.router(({ history }) => {
	  return (
		<Router history={history}>
		  <Route path="/" component={App} />
		<Router>
	  );
	});
	推荐把路由信息抽成一个单独的文件，这样结合 babel-plugin-dva-hmr 可实现路由和组件的热加载，比如：
	app.router(require('./router'));
	而有些场景可能不使用路由，比如多页应用，所以也可以传入返回 JSX 元素的函数。比如：
	app.router(() => <App />);
	
app.start(selector?)
	启动应用 selector可选， 如果没有该参数 会返回一个返回 JSX 元素的函数。
	app.start('#root');
	那么什么时候不加 selector？常见场景有测试、node 端、react-native 和 i18n 国际化支持。
	比如通过 react-intl 支持国际化的例子：
	import { IntlProvider } from 'react-intl';
	...
	const App = app.start();
	ReactDOM.render(<IntlProvider><App /></IntlProvider>, htmlElement);


		
Model
	model是dva中的重要概念
	app.model({
		namespace: 'todo',
		state: [],
		reducers: {
			add(state, { payload: todo }) {
			  // 保存数据到 state
			  return [...state, todo];
			},
		},
		effects: {
			*save({ payload: todo }, { put, call }) {
			  // 调用 saveTodoToServer，成功后触发 `add` action 保存到 state
			  yield call(saveTodoToServer, todo);
			  yield put({ type: 'add', payload: todo });
			},
		},
		subscriptions: {
			setup({ history, dispatch }) {
			  // 监听 history 变化，当进入 `/` 时触发 `load` action
			  return history.listen(({ pathname }) => {
				if (pathname === '/') {
				  dispatch({ type: 'load' });
				}
			  });
			},
		},
	});
	
	包含5个属性
	namespace state reducers effects subscriptions
	
	namespace: 命名空间， 同时也是他在全局State上的属性，只能用字符串 不支持通过 . 方式创建多层命名空间
	
	state: 	初始值 优先级低于 dva() 中的initalState 中的初始值
			比如：
			const app = dva({
			  initialState: { count: 1 },
			});
			app.model({
			  namespace: 'count',
			  state: 0,
			});
			此时，在 app.start() 后 state.count 为 1 
	
	reducers: 	以key/value 格式定义reducer 用于处理同步操作，唯一可以修改state的地方 有action触发
				格式为 (state, action) => newState 或 [(state, action) => newState, enhancer]
				 https://github.com/dvajs/dva/blob/master/packages/dva-core/test/reducers-test.js
				 
	effects:	以 key/value 格式定义effect 用于处理异步操作和业务逻辑 
				不直接修改 state 由 action 触发 可以触发 action 可以和服务器交互 可以获取全局 state 的数据等等
				格式为 *(action, effects) => void 或 [*(action, effects) => void, { type }]。
				type 类型有：
					takeEvery
					takeLatest
					throttle
					watcher
				详见：https://github.com/dvajs/dva/blob/master/packages/dva-core/test/effects-test.js
	

	subscriptions:	以 key/value 格式定义 subscription
					subscription 是订阅，用于订阅一个数据源
					然后根据需要 dispatch 相应的 action
					在 app.start() 时被执行，
					数据源可以是当前的时间、服务器的 websocket 连接、keyboard 输入、geolocation 变化、history 路由变化等等
					格式为 ({ dispatch, history }, done) => unlistenFunction。
					如果要使用 app.unmodel()，subscription 必须返回 unlisten 方法，用于取消数据订阅。

